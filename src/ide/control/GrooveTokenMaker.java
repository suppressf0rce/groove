/* The following code was generated by JFlex 1.4.1 on 1/12/18, 4:00 AM */

/*
 * 12.01.2018
 *
 * GrooveTokenMaker.java - Token maker for the Groove programming language.
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package ide.control;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

import javax.swing.text.Segment;
import java.io.IOException;
import java.io.Reader;


/**
 * Scanner for the Groove programming language.
 *
 * @author Dejan Radmanovic
 * @version 0.1
 */

public class GrooveTokenMaker extends AbstractJFlexTokenMaker {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int MLC = 3;
    public static final int LONG_STRING_2 = 2;
    public static final int LONG_STRING_1 = 1;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\33\1\12\1\0\1\33\1\31\22\0\1\33\1\37\1\11" +
                    "\1\32\1\40\1\43\1\73\1\10\1\66\1\66\1\35\1\41\1\37" +
                    "\1\27\1\24\1\34\1\16\7\21\2\3\1\52\1\42\1\70\1\67" +
                    "\1\71\1\37\1\36\4\23\1\26\1\23\3\1\1\30\1\1\1\14" +
                    "\5\1\1\6\2\1\1\7\2\1\1\17\2\1\1\66\1\13\1\66" +
                    "\1\72\1\2\1\0\1\54\1\62\1\55\1\22\1\25\1\50\1\57" +
                    "\1\44\1\51\1\30\1\56\1\15\1\60\1\63\1\61\1\46\1\1" +
                    "\1\4\1\47\1\45\1\5\1\64\1\53\1\20\1\65\1\1\1\31" +
                    "\1\74\1\31\1\37\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\4\0\1\1\1\2\1\3\3\2\2\4\1\5\1\2" +
                    "\1\3\1\2\1\6\1\2\1\6\1\7\1\10\2\6" +
                    "\1\2\3\6\5\2\1\11\7\2\4\6\2\12\2\4" +
                    "\1\13\1\14\4\13\1\15\1\3\1\16\1\15\1\16" +
                    "\1\2\2\4\1\0\2\4\1\0\2\2\1\15\1\3" +
                    "\1\15\1\2\1\17\3\2\1\20\14\2\1\17\14\2" +
                    "\2\0\1\21\5\0\2\16\1\0\1\2\1\4\1\22" +
                    "\1\23\1\2\1\3\25\2\1\24\10\2\1\25\1\26" +
                    "\4\0\1\16\1\2\1\24\3\2\1\27\17\2\2\0" +
                    "\1\30\4\2\1\17\11\2\2\0\12\2";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab" +
                    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\364\0\u02dc\0\u0319\0\u0356" +
                    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\364" +
                    "\0\364\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac" +
                    "\0\364\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857" +
                    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f" +
                    "\0\u0a7c\0\364\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bad" +
                    "\0\u0bea\0\u0c27\0\u0bad\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58" +
                    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40" +
                    "\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\364\0\u1071\0\u10ae\0\u10eb" +
                    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3" +
                    "\0\u1310\0\u0131\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e" +
                    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666" +
                    "\0\364\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\364\0\u17d4" +
                    "\0\u1811\0\u184e\0\364\0\364\0\364\0\u188b\0\u18c8\0\u1905" +
                    "\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed" +
                    "\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5" +
                    "\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd" +
                    "\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\364\0\364\0\u202b" +
                    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u0131\0\u2199\0\u21d6" +
                    "\0\u2213\0\u0131\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381" +
                    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569" +
                    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751" +
                    "\0\u1ab0\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc" +
                    "\0\u2939\0\u2976\0\u29b3\0\u265d\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7" +
                    "\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\5\2\6\1\7\1\10\1\11\1\12\1\11\1\13" +
                    "\1\14\1\15\1\5\1\6\1\16\1\17\2\6\1\7" +
                    "\1\20\1\6\1\21\1\22\1\6\1\23\1\6\1\5" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\5\1\32" +
                    "\1\30\1\33\1\6\1\34\1\35\1\36\1\37\1\40" +
                    "\1\41\1\42\1\43\1\44\3\6\1\45\1\46\1\47" +
                    "\1\50\1\6\1\41\1\33\1\51\1\52\1\31\1\53" +
                    "\1\54\10\55\1\56\64\55\11\57\1\60\63\57\12\61" +
                    "\1\62\22\61\1\63\6\61\1\64\3\61\1\65\2\61" +
                    "\1\66\21\61\76\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\13\6\7\0\3\67" +
                    "\1\7\4\67\3\0\1\67\2\70\1\7\2\67\1\7" +
                    "\2\67\1\71\2\72\1\0\1\73\1\0\1\67\3\0" +
                    "\1\67\1\0\1\67\3\0\6\67\1\0\13\67\10\0" +
                    "\7\6\1\13\1\14\2\0\10\6\1\0\1\74\1\6" +
                    "\1\0\1\6\13\0\6\6\1\0\13\6\10\0\3\6" +
                    "\1\12\1\6\1\12\1\6\1\13\1\14\2\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\6\6\1\0\13\6" +
                    "\10\0\7\6\1\13\1\14\2\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\13\6\7\0\10\75" +
                    "\1\76\1\75\1\0\1\77\61\75\11\100\1\101\1\0" +
                    "\1\102\61\100\1\0\7\6\4\0\10\6\1\0\1\103" +
                    "\1\6\1\0\1\6\13\0\6\6\1\0\6\6\1\104" +
                    "\4\6\7\0\3\67\1\105\4\67\3\0\1\67\2\70" +
                    "\1\106\2\107\1\106\2\67\1\71\2\72\1\0\1\73" +
                    "\1\0\1\67\3\0\1\67\1\0\1\67\3\0\6\67" +
                    "\1\0\13\67\10\0\7\6\4\0\10\6\1\0\1\110" +
                    "\1\6\1\0\1\6\13\0\6\6\1\0\6\6\1\111" +
                    "\4\6\12\0\1\71\12\0\1\71\2\0\1\71\54\0" +
                    "\7\6\4\0\1\6\1\112\2\6\1\113\3\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\10\6\1\114" +
                    "\2\6\36\0\1\31\37\0\1\31\5\0\12\24\1\0" +
                    "\62\24\33\0\1\25\75\0\1\24\1\115\31\0\1\31" +
                    "\42\0\1\31\31\0\1\31\46\0\1\31\25\0\1\31" +
                    "\74\0\1\31\6\0\3\6\1\116\3\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\1\117\5\6\1\0" +
                    "\13\6\10\0\3\6\1\120\1\121\2\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\6\6\1\0\1\6" +
                    "\1\122\11\6\10\0\4\6\1\123\2\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\1\6\1\124\4\6" +
                    "\1\0\1\125\12\6\10\0\4\6\1\126\2\6\4\0" +
                    "\1\6\1\127\6\6\1\0\2\6\1\0\1\6\13\0" +
                    "\5\6\1\130\1\0\1\6\1\131\4\6\1\45\4\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\3\6\2\132\1\6\1\0\5\6\1\133\2\6" +
                    "\1\134\2\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\1\135\5\6\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\7\6\1\136\1\137\2\6\10\0\7\6" +
                    "\4\0\1\6\1\140\6\6\1\0\2\6\1\0\1\6" +
                    "\13\0\1\141\5\6\1\0\1\6\1\142\4\6\1\143" +
                    "\4\6\10\0\3\6\1\132\3\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\13\6\10\0" +
                    "\3\6\1\144\3\6\4\0\10\6\1\0\1\132\1\6" +
                    "\1\0\1\6\13\0\6\6\1\0\13\6\10\0\7\6" +
                    "\4\0\10\6\1\0\1\145\1\6\1\0\1\6\13\0" +
                    "\6\6\1\0\6\6\1\103\4\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\6\6\1\146\4\6\77\0\1\33\75\0\1\33\76\0" +
                    "\1\31\75\0\1\31\10\55\1\0\64\55\10\0\1\147" +
                    "\64\0\11\57\1\0\63\57\11\0\1\150\63\0\12\61" +
                    "\1\0\22\61\1\0\6\61\1\0\3\61\1\0\2\61" +
                    "\1\0\21\61\34\0\1\151\105\0\1\152\74\0\1\153" +
                    "\3\0\1\154\76\0\1\155\21\0\10\67\3\0\11\67" +
                    "\1\0\2\67\1\0\1\67\1\0\1\67\3\0\1\67" +
                    "\1\0\1\67\3\0\6\67\1\0\13\67\12\0\1\71" +
                    "\12\0\1\71\2\0\1\71\3\0\2\156\1\0\1\157" +
                    "\44\0\3\67\1\160\4\67\3\0\3\67\1\160\2\67" +
                    "\1\160\2\67\1\0\2\67\1\161\1\67\1\0\1\67" +
                    "\3\0\1\67\1\0\1\67\1\161\2\0\6\67\1\0" +
                    "\13\67\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\1\6\1\162\4\6\1\0\13\6\7\0" +
                    "\10\75\1\163\1\75\1\0\1\77\61\75\10\0\1\164" +
                    "\64\0\12\75\1\0\62\75\11\100\1\163\1\0\1\102" +
                    "\61\100\11\0\1\165\63\0\12\100\1\0\62\100\1\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\1\6\1\132\4\6\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\10\6\1\166\2\6\7\0\3\67\1\105\4\67\3\0" +
                    "\3\67\1\105\2\67\1\105\2\67\1\71\2\72\1\0" +
                    "\1\73\1\0\1\67\3\0\1\67\1\0\1\67\3\0" +
                    "\6\67\1\0\13\67\7\0\3\67\1\105\4\67\3\0" +
                    "\1\67\2\70\1\106\2\67\1\106\2\67\1\71\2\72" +
                    "\1\0\1\73\1\0\1\67\3\0\1\67\1\0\1\67" +
                    "\3\0\6\67\1\0\13\67\7\0\3\67\1\167\4\67" +
                    "\3\0\3\67\1\167\2\67\3\167\1\0\2\167\1\0" +
                    "\1\67\1\0\1\67\3\0\1\67\1\0\1\67\3\0" +
                    "\4\67\1\167\1\67\1\0\1\67\2\167\4\67\1\167" +
                    "\3\67\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\4\6\1\170\1\6\1\0\13\6\10\0" +
                    "\4\6\1\171\2\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\3\6\1\172" +
                    "\2\6\1\0\13\6\10\0\7\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\1\6\1\173\4\6\1\0" +
                    "\13\6\10\0\4\6\1\174\2\6\4\0\6\6\1\132" +
                    "\1\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\10\0\4\6\1\175\2\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\12\6\1\132" +
                    "\10\0\3\6\1\176\3\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\5\6\1\177\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\5\6\1\200\1\0\6\6\1\201\4\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\7\6\1\202\3\6\10\0\7\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\6\6\1\0\2\6" +
                    "\1\203\10\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\2\6\1\204\3\6\1\0\13\6" +
                    "\10\0\3\6\1\205\3\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\1\6\1\206\11\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\5\6\1\207\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\10\6\1\210\2\6\10\0\7\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\6\6\1\211" +
                    "\4\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\10\6\1\212\2\6\10\0" +
                    "\7\6\4\0\1\6\1\213\6\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\2\6\1\214" +
                    "\3\6\1\0\13\6\10\0\7\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\1\6\1\215\4\6\1\0" +
                    "\13\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\5\6\1\216\1\0\13\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\3\6" +
                    "\1\217\2\6\1\0\13\6\10\0\7\6\4\0\6\6" +
                    "\1\132\1\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\13\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\1\6\1\220\11\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\6\6\1\0\1\6\1\221\11\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\1\6" +
                    "\1\222\1\6\1\172\2\6\1\0\13\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\10\6\1\223\2\6\10\0\7\6\4\0\10\6" +
                    "\1\0\1\224\1\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\1\132\12\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\5\6" +
                    "\1\225\1\0\13\6\17\0\1\226\75\0\1\227\130\0" +
                    "\1\230\75\0\1\231\43\0\1\232\132\0\1\233\24\0" +
                    "\1\234\12\0\1\234\2\0\1\234\5\0\1\161\11\0" +
                    "\1\161\33\0\3\67\1\160\4\67\3\0\3\67\1\160" +
                    "\2\67\1\160\2\67\1\0\2\67\1\0\1\73\1\0" +
                    "\1\67\3\0\1\67\1\0\1\67\3\0\6\67\1\0" +
                    "\13\67\12\0\1\234\12\0\1\234\2\0\1\234\54\0" +
                    "\4\6\1\235\2\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\4\6\1\236\6\6\7\0\3\67\1\167\4\67\3\0" +
                    "\1\67\2\70\1\167\2\67\3\167\1\0\2\167\1\0" +
                    "\1\67\1\0\1\67\3\0\1\67\1\0\1\67\3\0" +
                    "\4\67\1\167\1\67\1\0\1\67\2\167\4\67\1\167" +
                    "\3\67\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\1\6\1\237\11\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\7\6\1\240\3\6\10\0\7\6\4\0" +
                    "\10\6\1\0\1\132\1\6\1\0\1\6\13\0\6\6" +
                    "\1\0\13\6\10\0\7\6\4\0\10\6\1\0\1\241" +
                    "\1\6\1\0\1\6\13\0\6\6\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\5\6\1\236\5\6\10\0\7\6\4\0" +
                    "\10\6\1\0\1\242\1\6\1\0\1\6\13\0\6\6" +
                    "\1\0\13\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\6\6\1\243\4\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\3\6\1\132\2\6\1\0\13\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\11\6\1\244\1\6\10\0\7\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\1\6\1\245\4\6" +
                    "\1\0\13\6\10\0\7\6\4\0\1\6\1\246\6\6" +
                    "\1\0\2\6\1\0\1\6\13\0\6\6\1\0\13\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\6\6\1\0\3\6\1\247\7\6\10\0\7\6" +
                    "\4\0\10\6\1\0\1\45\1\6\1\0\1\6\13\0" +
                    "\6\6\1\0\13\6\10\0\7\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\5\6\1\104\1\0\13\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\1\6\1\246\4\6\1\0\13\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\1\6" +
                    "\1\222\4\6\1\0\13\6\10\0\7\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\6\6\1\0\2\6" +
                    "\1\250\10\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\1\6\1\251\11\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\6\6\1\0\1\6\1\252\11\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\3\6" +
                    "\1\175\2\6\1\0\13\6\10\0\7\6\4\0\1\6" +
                    "\1\253\6\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\6\6\1\254\4\6\10\0\7\6\4\0\10\6" +
                    "\1\0\1\255\1\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\10\0\7\6\4\0\1\6\1\172\6\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\1\6\1\256\4\6\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\3\6\1\177" +
                    "\2\6\1\0\13\6\10\0\3\6\1\236\3\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\2\6\1\257\10\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\1\6\1\260\4\6\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\1\6\1\261\11\6\10\0\7\6\4\0\6\6\1\236" +
                    "\1\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\55\0\1\262\100\0\1\263\47\0\1\231\73\0" +
                    "\1\264\53\0\1\234\12\0\1\234\2\0\1\234\6\0" +
                    "\1\157\45\0\3\6\1\265\3\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\13\6\10\0" +
                    "\4\6\1\266\2\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\13\6\10\0\7\6\4\0" +
                    "\1\6\1\267\6\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\13\6\10\0\7\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\10\6\1\270" +
                    "\2\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\1\271\12\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\1\6\1\272\11\6\10\0\7\6\4\0\10\6" +
                    "\1\0\1\273\1\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\5\6\1\274\1\0\13\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\1\6\1\275\11\6\10\0\7\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\1\6\1\276\4\6" +
                    "\1\0\13\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\1\6\1\236\4\6\1\0\13\6" +
                    "\10\0\7\6\4\0\1\6\1\132\6\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\13\6\10\0\7\6" +
                    "\4\0\10\6\1\0\1\277\1\6\1\0\1\6\13\0" +
                    "\6\6\1\0\13\6\10\0\3\6\1\103\3\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\10\0\3\6\1\300\3\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\13\6\10\0" +
                    "\3\6\1\301\3\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\13\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\1\132\5\6" +
                    "\1\0\13\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\5\6\1\302\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\3\6\1\132\7\6\56\0\1\231\2\0" +
                    "\1\263\56\0\1\303\41\0\1\264\1\304\5\264\1\304" +
                    "\3\0\10\264\1\304\2\264\1\304\1\264\1\0\1\304" +
                    "\1\0\1\264\3\304\1\264\3\304\6\264\1\304\13\264" +
                    "\2\304\3\0\1\304\2\0\7\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\10\6\1\132" +
                    "\2\6\10\0\7\6\4\0\1\6\1\103\6\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\1\236\1\6\1\0\1\6" +
                    "\13\0\6\6\1\0\13\6\10\0\7\6\4\0\6\6" +
                    "\1\177\1\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\13\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\1\6\1\172\4\6\1\0\13\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\6\6\1\0\2\6\1\305\10\6\10\0\7\6" +
                    "\4\0\10\6\1\0\2\6\1\0\1\6\13\0\6\6" +
                    "\1\0\2\6\1\132\10\6\10\0\7\6\4\0\10\6" +
                    "\1\0\2\6\1\0\1\6\13\0\6\6\1\0\4\6" +
                    "\1\172\6\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\5\6\1\306\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\5\6\1\307\5\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\4\6\1\310" +
                    "\1\6\1\0\13\6\10\0\7\6\4\0\10\6\1\0" +
                    "\2\6\1\0\1\6\13\0\6\6\1\0\1\6\1\311" +
                    "\11\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\10\6\1\312\2\6\43\0" +
                    "\1\264\41\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\1\6\1\313\4\6\1\0\13\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\6\6\1\265\4\6\10\0\7\6\4\0" +
                    "\10\6\1\0\1\314\1\6\1\0\1\6\13\0\6\6" +
                    "\1\0\13\6\10\0\7\6\4\0\10\6\1\0\2\6" +
                    "\1\0\1\6\13\0\6\6\1\0\1\6\1\315\11\6" +
                    "\10\0\7\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\6\6\1\0\2\6\1\103\10\6\10\0\4\6" +
                    "\1\172\2\6\4\0\10\6\1\0\2\6\1\0\1\6" +
                    "\13\0\6\6\1\0\13\6\10\0\7\6\4\0\10\6" +
                    "\1\0\1\137\1\6\1\0\1\6\13\0\6\6\1\0" +
                    "\13\6\10\0\7\6\4\0\10\6\1\0\2\6\1\0" +
                    "\1\6\13\0\6\6\1\0\10\6\1\316\2\6\10\0" +
                    "\7\6\4\0\10\6\1\0\2\6\1\0\1\6\13\0" +
                    "\6\6\1\0\2\6\1\172\10\6\10\0\7\6\4\0" +
                    "\10\6\1\0\2\6\1\0\1\6\13\0\1\6\1\177" +
                    "\4\6\1\0\13\6\7\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\4\0\1\11\7\1\1\11\12\1\2\11\7\1\1\11" +
                    "\20\1\1\11\14\1\1\0\2\1\1\0\12\1\1\11" +
                    "\31\1\2\0\1\11\5\0\1\11\1\1\1\0\1\1" +
                    "\3\11\40\1\2\11\4\0\26\1\2\0\17\1\2\0" +
                    "\12\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;
    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;
    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public GrooveTokenMaker() {
        super();
    }

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public GrooveTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public GrooveTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[206];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[206];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[11346];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    /* user code: */

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[206];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 168) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, true);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array       The character array.
     * @param start       The starting offset in the array.
     * @param end         The ending offset in the array.
     * @param tokenType   The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[]{"#", null, "//", null};
    }

    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text             The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset      The offset into the document at which
     *                         <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     * the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {

            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;
            case Token.LITERAL_STRING_DOUBLE_QUOTE:
                state = LONG_STRING_2;
                break;
            case Token.LITERAL_CHAR:
                state = LONG_STRING_1;
                break;
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise
     * <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 5: {
                    addNullToken();
                    return firstToken;
                }
                case 25:
                    break;
                case 10: {
                    addToken(Token.LITERAL_CHAR);
                }
                case 26:
                    break;
                case 17: {
                    yybegin(YYINITIAL);
                    addToken(start, zzStartRead + 1, Token.COMMENT_MULTILINE);
                }
                case 27:
                    break;
                case 16: {
                    start = zzMarkedPos - 2;
                    yybegin(MLC);
                }
                case 28:
                    break;
                case 8: {
                    addToken(Token.WHITESPACE);
                }
                case 29:
                    break;
                case 14: {
                    addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 30:
                    break;
                case 15: {
                    addToken(Token.RESERVED_WORD);
                }
                case 31:
                    break;
                case 18: {
                    yybegin(LONG_STRING_1);
                    addToken(Token.LITERAL_CHAR);
                }
                case 32:
                    break;
                case 9: {
                    addToken(Token.SEPARATOR);
                }
                case 33:
                    break;
                case 2: {
                    addToken(Token.IDENTIFIER);
                }
                case 34:
                    break;
                case 20: {
                    addToken(Token.DATA_TYPE);
                }
                case 35:
                    break;
                case 1: {
                    addToken(Token.ERROR_IDENTIFIER);
                }
                case 36:
                    break;
                case 23: {
                    addToken(Token.LITERAL_BOOLEAN);
                }
                case 37:
                    break;
                case 4: {
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 38:
                    break;
                case 24: {
                    int temp = zzStartRead;
                    addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                    addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
                    start = zzMarkedPos;
                }
                case 39:
                    break;
                case 7: {
                    addToken(Token.COMMENT_EOL);
                }
                case 40:
                    break;
                case 13: {
                    addToken(Token.ERROR_NUMBER_FORMAT);
                }
                case 41:
                    break;
                case 3: {
                    addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 42:
                    break;
                case 6: {
                    addToken(Token.OPERATOR);
                }
                case 43:
                    break;
                case 22: {
                    yybegin(YYINITIAL);
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 44:
                    break;
                case 19: {
                    yybegin(LONG_STRING_2);
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 45:
                    break;
                case 21: {
                    yybegin(YYINITIAL);
                    addToken(Token.LITERAL_CHAR);
                }
                case 46:
                    break;
                case 11: {
                }
                case 47:
                    break;
                case 12: {
                    addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                    return firstToken;
                }
                case 48:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                addNullToken();
                                return firstToken;
                            }
                            case 207:
                                break;
                            case MLC: {
                                addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                                return firstToken;
                            }
                            case 208:
                                break;
                            case LONG_STRING_2: {
                                if (firstToken == null) {
                                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                                }
                                return firstToken;
                            }
                            case 209:
                                break;
                            case LONG_STRING_1: {
                                if (firstToken == null) {
                                    addToken(Token.LITERAL_CHAR);
                                }
                                return firstToken;
                            }
                            case 210:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
